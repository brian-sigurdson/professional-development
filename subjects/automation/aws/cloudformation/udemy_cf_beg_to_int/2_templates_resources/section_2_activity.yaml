AWSTemplateFormatVersion: 2010-09-09
Description: Section two activity

Resources:
  # vpc
  MyVPC:
    Type: AWS::EC2::VPC
    Description: Section 2 activity
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
#      InstanceTenancy: String
#      Ipv4IpamPoolId: String
#      Ipv4NetmaskLength: Integer
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Section-2-vpc'

  # public subnet
  MySubnet:
    Type: AWS::EC2::Subnet
    Properties:
#      AssignIpv6AddressOnCreation: Boolean
#      AvailabilityZone: String
      CidrBlock: 10.0.1.0/24
#      Ipv6CidrBlock: String
      MapPublicIpOnLaunch: true
#      OutpostArn: String
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Section-2-pubsub'
      VpcId: !Ref MyVPC

  # igw
  MyIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Section-2-igw'

  # igw attachment
  MyIGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref MyIGW
      VpcId: !Ref MyVPC
#      VpnGatewayId: String

  # route table
  MyRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Section-2-rt'
      VpcId: !Ref MyVPC

  # subnet to route table assoc
  MySubnetToRouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MyRouteTable
      SubnetId: !Ref MySubnet

  # route table assoc
  MyRoute:
    Type: AWS::EC2::Route
    DependsOn: MyIGW
    Properties:
#      CarrierGatewayId: String
      DestinationCidrBlock: 0.0.0.0/0
#      DestinationIpv6CidrBlock: String
#      EgressOnlyInternetGatewayId: String
      GatewayId: !Ref MyIGW
#      InstanceId: String
#      LocalGatewayId: String
#      NatGatewayId: String
#      NetworkInterfaceId: String
      RouteTableId: !Ref MyRouteTable
#      TransitGatewayId: String
#      VpcEndpointId: String
#      VpcPeeringConnectionId: String

  # instance
  MyEC2Instance:
    Type: AWS::EC2::Instance
    DependsOn:
      - MyRoute
      - MySubnetToRouteTableAssoc
    Properties:
#      AdditionalInfo: String
#      Affinity: String
#      AvailabilityZone: String
#      BlockDeviceMappings:
#        - BlockDeviceMapping
#      CpuOptions:
#        CpuOptions
#      CreditSpecification:
#        CreditSpecification
#      DisableApiTermination: Boolean
#      EbsOptimized: Boolean
#      ElasticGpuSpecifications:
#        - ElasticGpuSpecification
#      ElasticInferenceAccelerators:
#        - ElasticInferenceAccelerator
#      EnclaveOptions:
#        EnclaveOptions
#      HibernationOptions:
#        HibernationOptions
#      HostId: String
#      HostResourceGroupArn: String
#      IamInstanceProfile: String
      ImageId: ami-001089eb624938d9f
#      InstanceInitiatedShutdownBehavior: String
      InstanceType: t2.micro
#      Ipv6AddressCount: Integer
#      Ipv6Addresses:
#        - InstanceIpv6Address
#      KernelId: String
#      KeyName: String
#      LaunchTemplate:
#        LaunchTemplateSpecification
#      LicenseSpecifications:
#        - LicenseSpecification
#      Monitoring: Boolean
#      NetworkInterfaces:
#        - NetworkInterface
#      PlacementGroupName: String
#      PrivateIpAddress: String
#      PropagateTagsToVolumeOnCreation: Boolean
#      RamdiskId: String
      SecurityGroupIds:
        - !Ref MyInstanceSecurityGroup
#      SecurityGroups:
#        - String
#      SourceDestCheck: Boolean
#      SsmAssociations:
#        - SsmAssociation
      SubnetId: !Ref MySubnet
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Section-2-instance'
#      Tenancy: String
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install httpd -y
          systemctl start httpd
#      Volumes:
#        - Volume

  MyInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: A do nothing security group
#      GroupName: String
#      SecurityGroupEgress:
#        - Egress
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Section-2-sg'
      VpcId: !Ref MyVPC

